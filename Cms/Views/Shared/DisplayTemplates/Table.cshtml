@using CmsDomain
@model IEnumerable<CmsEntity>
@functions {

    public static bool ShouldShow(ModelMetadata metadata, ViewDataDictionary viewData) {
        return metadata.ShowForDisplay && !metadata.IsComplexType && !viewData.TemplateInfo.Visited(metadata);
    }

}
@if (Model.Any()) {
    var properties = ModelMetadata.FromLambdaExpression(m => m.ToArray()[0], ViewData).Properties.Where(pm => ShouldShow(pm, ViewData));

    <table class="table table-striped table-bordered dataTable">
        <tr>
            <th>&nbsp;</th>
            @foreach (var property in properties) {
                <th>
                    @property.GetDisplayName()
                </th>
            }
        </tr>
        @for (var i = 0; i < Model.Count(); i++) {
            var itemMD = ModelMetadata.FromLambdaExpression(m => m.ToArray()[i], ViewData);
            <tr>
                <td>
                    <a href="@Url.Action("Update", new { Id = Model.ToArray()[i].Id })" class="btn">Update</a>
                </td>
                @foreach (var property in properties)
                {
                    <td>
                        @{ var propertyMetadata = itemMD.Properties.Single(m => m.PropertyName == property.PropertyName); }
                        @Html.DisplayFor(m => propertyMetadata.Model)
                    </td>
                }
            </tr>
        }
    </table>
}